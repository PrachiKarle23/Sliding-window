class Solution {
public:
    void solve(vector<int>& nums,int &ans,int i,vector<int>a)
    {
        if(i==nums.size()){
            if(a.size()!=0){
                int maxi=*max_element(a.begin(),a.end());
                int mini=*min_element(a.begin(),a.end());
                if(maxi-mini==1){
                    if(a.size()>ans){
                      ans=a.size();
                    }
                }
            }
            return;
        }

        solve(nums,ans,i+1,a);

        a.push_back(nums[i]);
        solve(nums,ans,i+1,a);
    }
    int findLHS(vector<int>& nums) {
        int ans=0;
        vector<int>a;
        solve(nums,ans,0,a);
        return ans;
    }
};


//MAP
class Solution {
public:
    int findLHS(vector<int>& nums) {
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
        }
        int res=0;
        for(auto i:mp)
        {
            if(mp.count(i.first-1)>0){
                res=max(res, i.second+mp[i.first-1]);
            }
        }
        return res;
    }
};

//sliding window way
class Solution {
public:
    int findLHS(vector<int>& nums) {
        int left=0,right=0;
        int ans=0,maxAns=0;
        sort(nums.begin(),nums.end());

        while(right<nums.size())
        {
          if(nums[right]-nums[left]==1){
            ans=right-left+1;
            maxAns=max(maxAns,ans);
          }
          else if(nums[right]-nums[left]>1){
              while(nums[right]-nums[left]>1){
                left++;
              }
          }
          right++;
       }
       return maxAns;
    }
};
